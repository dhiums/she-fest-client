/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query GetAllCandidateProgrammes($api_key: String!) {\n  candidateProgrammes(api_key: $api_key) {\n    id\n    candidate {\n      name\n      chestNO\n    }\n    programme {\n      name\n      programCode\n    }\n  }\n}\n\nmutation AddCandidateProgramme($candidatesOfProgramme: [String!], $chestNO: String!, $programCode: String!) {\n  createCandidateProgramme(\n    createCandidateProgrammeInput: {candidatesOfGroup: $candidatesOfProgramme, chestNo: $chestNO, programme_code: $programCode}\n  ) {\n    id\n    candidate {\n      name\n      chestNO\n    }\n    programme {\n      name\n      programCode\n    }\n    candidatesOfGroup {\n      name\n      chestNO\n    }\n  }\n}\n\nmutation EditCandidateProgramme($candidatesOfProgramme: [String!], $chestNO: String!, $programCode: String!, $id: Int!) {\n  updateCandidateProgramme(\n    updateCandidateProgrammeInput: {candidatesOfGroup: $candidatesOfProgramme, chestNo: $chestNO, id: $id, programme_code: $programCode}\n  ) {\n    id\n    candidate {\n      name\n      chestNO\n    }\n    programme {\n      name\n      programCode\n    }\n    candidatesOfGroup {\n      name\n      chestNO\n    }\n  }\n}\n\nmutation AddManyCandidateProgrammes($inputs: [CreateCandidateProgrammeInput!]!) {\n  createManyCandidateProgramme(\n    createManyCandidateProgrammeInput: {inputs: $inputs}\n  ) {\n    errors\n    result {\n      candidate {\n        name\n        chestNO\n      }\n      programme {\n        name\n        programCode\n      }\n    }\n  }\n}\n\nmutation DeleteCandidateProgramme($id: Int!) {\n  removeCandidateProgramme(id: $id) {\n    __typename\n  }\n}": types.GetAllCandidateProgrammesDocument,
    "query GetAllCandidates($api_key: String!) {\n  candidates(api_key: $api_key) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n    candidateProgrammes {\n      programme {\n        name\n        programCode\n        type\n      }\n    }\n  }\n}\n\nquery GetAllDetailedCandidates($api_key: String!) {\n  candidates(api_key: $api_key) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n    id\n    candidateProgrammes {\n      mark\n      point\n      id\n      programme {\n        name\n        programCode\n        type\n        mode\n      }\n      candidatesOfGroup {\n        id\n      }\n    }\n    groupPoint\n    individualPoint\n  }\n}\n\nquery GetOneCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    name\n    chestNO\n    individualPoint\n    groupPoint\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nquery GetCandidateByChestNo($api_key: String!, $chestNO: String!) {\n  candidateByChestNo(api_key: $api_key, chestNo: $chestNO) {\n    id\n    chestNO\n    name\n    category {\n      id\n      name\n    }\n    team {\n      id\n      name\n    }\n    individualPoint\n    candidateProgrammes {\n      id\n      programme {\n        id\n        resultPublished\n        type\n        programCode\n        date\n        name\n      }\n      finalgrade {\n        id\n        name\n      }\n      finalposition {\n        id\n        name\n      }\n      zonalgrade {\n        id\n        name\n      }\n      zonalposition {\n        id\n        name\n      }\n      candidatesOfGroup {\n        id\n        name\n        chestNO\n      }\n      point\n    }\n  }\n}\n\nquery GetDetailedCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    chestNO\n    candidateProgrammes {\n      id\n      programme {\n        id\n        type\n        programCode\n        name\n      }\n      finalgrade {\n        id\n        name\n      }\n      finalposition {\n        id\n        name\n      }\n      zonalgrade {\n        id\n        name\n      }\n      zonalposition {\n        id\n        name\n      }\n      candidatesOfGroup {\n        id\n        name\n        chestNO\n      }\n      point\n    }\n  }\n}\n\nmutation AddCandidate($category: String!, $chestNO: String!, $name: String!, $team: String!) {\n  createCandidate(\n    createCandidateInput: {name: $name, category: $category, chestNO: $chestNO, team: $team}\n  ) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nmutation AddManyCandidates($inputs: [CreateCandidateInput!]!) {\n  createManyCandidates(createCandidateInput: {inputs: $inputs}) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nmutation EditCandidate($id: Int!, $name: String!, $category: String, $chestNO: String, $team: String) {\n  updateCandidate(\n    updateCandidateInput: {id: $id, name: $name, category: $category, chestNO: $chestNO, team: $team}\n  ) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nmutation DeleteCandidate($id: Int!) {\n  removeCandidate(id: $id) {\n    __typename\n  }\n}\n\nquery CategorBasedToppers {\n  getCategoryBasedToppers {\n    id\n    name\n    candidates {\n      chestNO\n      name\n      category {\n        name\n      }\n      team {\n        name\n      }\n    }\n  }\n}": types.GetAllCandidatesDocument,
    "query GetAllCategories($api_key: String!) {\n  categories(api_key: $api_key) {\n    id\n    name\n  }\n}\n\nquery GetOneCategory($id: Int!, $api_key: String!) {\n  category(id: $id, api_key: $api_key) {\n    id\n    name\n  }\n}\n\nmutation AddCategory($name: String!) {\n  createCategory(createCategoryInput: {name: $name}) {\n    id\n    name\n  }\n}\n\nmutation EditCategory($id: Int!, $name: String!) {\n  updateCategory(updateCategoryInput: {id: $id, name: $name}) {\n    id\n    name\n  }\n}\n\nmutation DeleteCategory($id: Int!) {\n  removeCategory(id: $id) {\n    __typename\n  }\n}": types.GetAllCategoriesDocument,
    "query GetAllCredentials {\n  credentials {\n    id\n    username\n    roles\n  }\n}\n\nquery GetOneCredential($id: Int!) {\n  credential(id: $id) {\n    id\n    username\n    roles\n    categories {\n      name\n      id\n    }\n    team {\n      name\n      id\n    }\n  }\n}\n\nmutation AddCredential($name: String!, $categories: [String!], $team: String, $password: String!, $roles: Roles!) {\n  createCredential(\n    createCredentialInput: {username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation EditCredential($id: Int!, $name: String, $categories: [String!], $team: String, $password: String, $roles: Roles) {\n  updateCredential(\n    updateCredentialInput: {id: $id, username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation DeleteCredential($id: Int!) {\n  removeCredential(id: $id) {\n    __typename\n  }\n}": types.GetAllCredentialsDocument,
    "query getSettings($api_key: String!) {\n  details(api_key: $api_key) {\n    name\n    logoId\n    id\n    isMultipleResultAllowed\n    motto\n    institution\n    coverId\n    isMediaHave\n    isSkillHave\n    isResultReady\n  }\n}\n\nmutation EditSettings($id: Int!, $name: String!, $logoId: String!, $motto: String!, $institution: String!, $coverId: String!, $isMediaHave: Boolean!, $isSkillHave: Boolean!) {\n  updateDetail(\n    updateDetailInput: {id: $id, name: $name, logoId: $logoId, motto: $motto, institution: $institution, coverId: $coverId, isMediaHave: $isMediaHave, isSkillHave: $isSkillHave}\n  ) {\n    id\n    name\n    logoId\n    motto\n    institution\n    coverId\n    isMediaHave\n    isSkillHave\n    isResultReady\n    isMultipleResultAllowed\n  }\n}": types.GetSettingsDocument,
    "query GetAllGrades($api_key: String!) {\n  grades(api_key: $api_key) {\n    id\n    name\n    percentage\n  }\n}\n\nquery GetOneGrade($id: Int!, $api_key: String!) {\n  grade(id: $id, api_key: $api_key) {\n    id\n    name\n    percentage\n    pointGroup\n    pointHouse\n    pointSingle\n  }\n}\n\nmutation AddGrade($name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  createGrade(\n    createGradeInput: {name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    percentage\n  }\n}\n\nmutation EditGrade($id: Int!, $name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  updateGrade(\n    updateGradeInput: {id: $id, name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    percentage\n  }\n}\n\nmutation DeleteGrade($id: Int!) {\n  removeGrade(id: $id) {\n    __typename\n  }\n}": types.GetAllGradesDocument,
    "mutation LoginUser($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    admin {\n      username\n      id\n      roles\n      categories {\n        id\n        name\n      }\n      team {\n        id\n        name\n      }\n    }\n    token\n  }\n}\n\nquery CheckLoggedIn {\n  checkLoggedIn {\n    username\n    id\n    roles\n    categories {\n      id\n      name\n    }\n    team {\n      id\n      name\n    }\n  }\n}\n\nmutation LogOutUser {\n  logout\n}": types.LoginUserDocument,
    "query GetAllPositions($api_key: String!) {\n  positions(api_key: $api_key) {\n    id\n    name\n    value\n  }\n}\n\nquery GetOnePosition($id: Int!, $api_key: String!) {\n  position(id: $id, api_key: $api_key) {\n    id\n    name\n    value\n    pointGroup\n    pointSingle\n    pointHouse\n  }\n}\n\nmutation AddPosition($name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  createPosition(\n    createPositionInput: {name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    value\n  }\n}\n\nmutation EditPosition($id: Int!, $name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  updatePosition(\n    updatePositionInput: {id: $id, name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    value\n  }\n}\n\nmutation DeletePosition($id: Int!) {\n  removePosition(id: $id) {\n    __typename\n  }\n}": types.GetAllPositionsDocument,
    "query GetAllProgrammes($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    name\n    programCode\n    type\n    candidateCount\n    groupCount\n    category {\n      name\n    }\n    candidateProgramme {\n      candidate {\n        chestNO\n        name\n        team {\n          name\n        }\n      }\n    }\n  }\n}\n\nquery GetProgrammeByCode($api_key: String!, $programCode: String!) {\n  programmeByCode(api_key: $api_key, code: $programCode) {\n    candidateProgramme {\n      candidate {\n        name\n        chestNO\n        team {\n          name\n        }\n      }\n      finalgrade {\n        id\n        name\n      }\n      finalposition {\n        id\n        name\n      }\n      zonalgrade {\n        id\n        name\n      }\n      zonalposition {\n        id\n        name\n      }\n      candidatesOfGroup {\n        name\n        chestNO\n      }\n      point\n    }\n    resultEntered\n    resultPublished\n    programCode\n    name\n    type\n    groupCount\n    resultEntered\n    candidateCount\n    resultPublished\n    anyIssue\n    mode\n    type\n    category {\n      name\n    }\n    duration\n    date\n    venue\n  }\n}\n\nquery GetDetailedProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    candidateProgramme {\n      id\n      candidate {\n        name\n        chestNO\n        team {\n          name\n          id\n        }\n      }\n      candidatesOfGroup {\n        name\n        chestNO\n      }\n    }\n    resultEntered\n    resultPublished\n    programCode\n    candidateCount\n    name\n    type\n    groupCount\n    resultEntered\n    resultPublished\n    anyIssue\n    category {\n      name\n    }\n    duration\n    date\n    venue\n  }\n}\n\nquery totalProgramsCount($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n  }\n}\n\nquery GetPublishedProgrammes($api_key: String!) {\n  resultPublishedProgrammes(api_key: $api_key) {\n    id\n    name\n    mode\n    type\n    programCode\n    resultEntered\n    resultPublished\n    candidateCount\n    category {\n      name\n    }\n    anyIssue\n    candidateProgramme {\n      id\n      point\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      candidate {\n        name\n        chestNO\n        team {\n          name\n          id\n        }\n      }\n    }\n  }\n}\n\nquery GetEnteredProgrammes($api_key: String!) {\n  resultEnteredProgrammes(api_key: $api_key) {\n    id\n    name\n    mode\n    type\n    programCode\n    resultEntered\n    resultPublished\n    candidateCount\n    category {\n      name\n    }\n    anyIssue\n    candidateProgramme {\n      id\n      point\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      candidate {\n        name\n        chestNO\n        team {\n          name\n          id\n        }\n      }\n    }\n  }\n}\n\nquery GetAllDetailedProgrammeForJudge($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    candidateProgramme {\n      candidate {\n        name\n        chestNO\n        team {\n          name\n        }\n      }\n      candidatesOfGroup {\n        name\n        chestNO\n      }\n      mark\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n    }\n    resultEntered\n    resultPublished\n    programCode\n    name\n    groupCount\n    candidateCount\n    resultEntered\n    resultPublished\n    anyIssue\n    type\n    category {\n      name\n    }\n  }\n}\n\nquery GetAllDetailedProgramme($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    candidateProgramme {\n      candidate {\n        id\n      }\n      candidatesOfGroup {\n        id\n      }\n    }\n    resultEntered\n    resultPublished\n    programCode\n    name\n    type\n    groupCount\n    candidateCount\n    resultEntered\n    resultPublished\n    anyIssue\n    category {\n      name\n    }\n    duration\n    date\n    venue\n  }\n}\n\nquery GetAllProgrammesByCandidates($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    name\n    programCode\n    resultEntered\n    resultPublished\n    candidateCount\n    groupCount\n    category {\n      name\n    }\n    candidateProgramme {\n      id\n    }\n  }\n}\n\nquery GetOneProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n    duration\n    anyIssue\n    candidateCount\n    groupCount\n    venue\n    date\n    category {\n      name\n    }\n    type\n    mode\n    conceptNote\n  }\n}\n\nmutation AddProgramme($name: String!, $candidateCount: Int!, $category: String!, $duration: Int!, $groupCount: Int, $programCode: String!, $type: Type!, $mode: Mode!, $conceptNote: String!) {\n  createProgramme(\n    createProgrammeInput: {name: $name, candidateCount: $candidateCount, category: $category, duration: $duration, groupCount: $groupCount, programCode: $programCode, type: $type, mode: $mode, conceptNote: $conceptNote}\n  ) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n  }\n}\n\nmutation AddManyProgrammes($inputs: [CreateProgrammeInput!]!) {\n  createManyProgrammes(createProgrammeInput: {inputs: $inputs}) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n  }\n}\n\nquery programsCount($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n  }\n}\n\nmutation EditProgramme($id: Int!, $name: String!, $candidateCount: Int!, $category: String!, $duration: Int!, $groupCount: Int, $programCode: String!, $type: Type!, $mode: Mode!, $conceptNote: String!) {\n  updateProgramme(\n    updateProgrammeInput: {id: $id, name: $name, candidateCount: $candidateCount, category: $category, duration: $duration, groupCount: $groupCount, programCode: $programCode, type: $type, mode: $mode, conceptNote: $conceptNote}\n  ) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n  }\n}\n\nmutation DeleteProgramme($id: Int!) {\n  removeProgramme(id: $id) {\n    __typename\n  }\n}\n\nmutation UploadManySchedule($inputs: [CreateSchedule!]!) {\n  setManySchedule(createScheduleInput: {inputs: $inputs}) {\n    programCode\n    date\n    venue\n  }\n}\n\nmutation UploadSchedule($programCode: String!, $date: DateTime!, $venue: Int) {\n  setSchedule(\n    createScheduleInput: {code: $programCode, date: $date, venue: $venue}\n  ) {\n    programCode\n    date\n    venue\n  }\n}": types.GetAllProgrammesDocument,
    "mutation PublishResults($programCodes: [String!]!) {\n  publishResults(programmeCode: $programCodes) {\n    id\n    resultPublished\n    programCode\n  }\n}\n\nmutation PublishResult($programCodes: String!) {\n  publishResult(programmeCode: $programCodes)\n}": types.PublishResultsDocument,
    "query GetRules($id: Int!, $api_key: String!) {\n  category(id: $id, api_key: $api_key) {\n    id\n    name\n    settings {\n      id\n      minProgram\n      maxProgram\n      minGroup\n      maxGroup\n      minStage\n      maxStage\n      minNonStage\n      maxNonStage\n      minOutDoor\n      maxOutDoor\n      minSports\n      maxSports\n      minSportsSingle\n      maxSportsSingle\n      minSportsGroup\n      maxSportsGroup\n      isProgrammeListUpdatable\n      minSingle\n      maxSingle\n    }\n  }\n}\n\nmutation AddRules($category: String!, $minProgram: Int!, $maxProgram: Int!, $minGroup: Int!, $maxGroup: Int!, $minStage: Int!, $maxStage: Int!, $minNonStage: Int!, $maxNonStage: Int!, $minOutDoor: Int!, $maxOutDoor: Int!, $minSports: Int!, $maxSports: Int!, $minSportsSingle: Int!, $maxSportsSingle: Int!, $minSportsGroup: Int!, $maxSportsGroup: Int!, $minSingle: Int!, $maxSingle: Int!) {\n  createCategorySetting(\n    createCategorySettingInput: {category: $category, minProgram: $minProgram, maxProgram: $maxProgram, minGroup: $minGroup, maxGroup: $maxGroup, minStage: $minStage, maxStage: $maxStage, minNonStage: $minNonStage, maxNonStage: $maxNonStage, minOutDoor: $minOutDoor, maxOutDoor: $maxOutDoor, minSports: $minSports, maxSports: $maxSports, minSportsSingle: $minSportsSingle, maxSportsSingle: $maxSportsSingle, minSportsGroup: $minSportsGroup, maxSportsGroup: $maxSportsGroup, minSingle: $minSingle, maxSingle: $maxSingle}\n  ) {\n    id\n    minProgram\n    maxProgram\n    minGroup\n    maxGroup\n    minStage\n    maxStage\n    minNonStage\n    maxNonStage\n    minOutDoor\n    maxOutDoor\n    minSports\n    maxSports\n    minSportsSingle\n    maxSportsSingle\n    minSportsGroup\n    maxSportsGroup\n    minSingle\n    maxSingle\n  }\n}\n\nmutation EditRules($id: Int!, $category: String!, $minProgram: Int!, $maxProgram: Int!, $minGroup: Int!, $maxGroup: Int!, $minStage: Int!, $maxStage: Int!, $minNonStage: Int!, $maxNonStage: Int!, $minOutDoor: Int!, $maxOutDoor: Int!, $minSports: Int!, $maxSports: Int!, $minSportsSingle: Int!, $maxSportsSingle: Int!, $minSportsGroup: Int!, $maxSportsGroup: Int!, $minSingle: Int!, $maxSingle: Int!) {\n  updateCategorySetting(\n    updateCategorySettingInput: {id: $id, category: $category, minProgram: $minProgram, maxProgram: $maxProgram, minGroup: $minGroup, maxGroup: $maxGroup, minStage: $minStage, maxStage: $maxStage, minNonStage: $minNonStage, maxNonStage: $maxNonStage, minOutDoor: $minOutDoor, maxOutDoor: $maxOutDoor, minSports: $minSports, maxSports: $maxSports, minSportsSingle: $minSportsSingle, maxSportsSingle: $maxSportsSingle, minSportsGroup: $minSportsGroup, maxSportsGroup: $maxSportsGroup, minSingle: $minSingle, maxSingle: $maxSingle}\n  ) {\n    id\n    minProgram\n    maxProgram\n    minGroup\n    maxGroup\n    minStage\n    maxStage\n    minNonStage\n    maxNonStage\n    minOutDoor\n    maxOutDoor\n    minSports\n    maxSports\n    minSportsSingle\n    maxSportsSingle\n    minSportsGroup\n    maxSportsGroup\n    minSingle\n    maxSingle\n  }\n}\n\nmutation DeleteRules($id: Int!) {\n  removeCategorySetting(id: $id) {\n    __typename\n  }\n}\n\nmutation ChangeRulesStatus($name: String!) {\n  changeProgrammeListUpdatable(name: $name) {\n    id\n    isProgrammeListUpdatable\n  }\n}": types.GetRulesDocument,
    "query GetAllTeamCandidates($api_key: String!) {\n  candidates(api_key: $api_key) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nquery GetOneTeamCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    name\n    individualPoint\n    groupPoint\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nquery GetDetailedTeamCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    chestNO\n    candidateProgrammes {\n      id\n      programme {\n        id\n        type\n        programCode\n        name\n      }\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      candidatesOfGroup {\n        id\n        name\n        chestNO\n      }\n      point\n    }\n  }\n}": types.GetAllTeamCandidatesDocument,
    "query GetAllTeamProgrammes($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    name\n    programCode\n    category {\n      name\n    }\n  }\n}\n\nquery GetDetailedTeamProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    candidateProgramme {\n      candidate {\n        name\n        chestNO\n      }\n    }\n    resultPublished\n    programCode\n  }\n}\n\nquery GetOneTeamProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    id\n    name\n    resultPublished\n    programCode\n    duration\n    candidateCount\n    groupCount\n    category {\n      name\n    }\n    type\n    mode\n    conceptNote\n  }\n}": types.GetAllTeamProgrammesDocument,
    "query GetAllTeams($api_key: String!) {\n  teams(api_key: $api_key) {\n    id\n    name\n    totalPoint\n    color\n    zone {\n      name\n    }\n  }\n}\n\nquery GetAllTeamsByPoint($api_key: String!) {\n  teams(api_key: $api_key) {\n    id\n    name\n    totalPoint\n    color\n  }\n}\n\nquery GetOneTeam($id: Int!, $api_key: String!) {\n  team(id: $id, api_key: $api_key) {\n    id\n    name\n    description\n    shortName\n    totalPoint\n    color\n  }\n}\n\nmutation AddTeam($name: String!, $description: String!, $shortName: String!, $color: String!, $zoneId: Int!) {\n  createTeam(\n    createTeamInput: {name: $name, description: $description, shortName: $shortName, color: $color, zoneId: $zoneId}\n  ) {\n    id\n    name\n    description\n    shortName\n    color\n  }\n}\n\nmutation EditTeam($id: Int!, $name: String!, $description: String!, $shortName: String!, $color: String!, $zoneId: Int!) {\n  updateTeam(\n    updateTeamInput: {id: $id, name: $name, description: $description, shortName: $shortName, color: $color, zoneId: $zoneId}\n  ) {\n    id\n    name\n  }\n}\n\nmutation DeleteTeam($id: Int!) {\n  removeTeam(id: $id) {\n    __typename\n  }\n}": types.GetAllTeamsDocument,
    "query GetAllZones {\n  zones {\n    id\n    name\n  }\n}\n\nquery GetOneZone($id: Int!) {\n  zone(id: $id) {\n    id\n    name\n  }\n}\n\nmutation AddZone($name: String!) {\n  createZone(createZoneInput: {name: $name}) {\n    id\n    name\n  }\n}\n\nmutation EditZone($id: Int!, $name: String!) {\n  updateZone(updateZoneInput: {id: $id, name: $name}) {\n    id\n    name\n  }\n}\n\nmutation DeleteZone($id: Int!) {\n  removeZone(id: $id) {\n    __typename\n  }\n}": types.GetAllZonesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllCandidateProgrammes($api_key: String!) {\n  candidateProgrammes(api_key: $api_key) {\n    id\n    candidate {\n      name\n      chestNO\n    }\n    programme {\n      name\n      programCode\n    }\n  }\n}\n\nmutation AddCandidateProgramme($candidatesOfProgramme: [String!], $chestNO: String!, $programCode: String!) {\n  createCandidateProgramme(\n    createCandidateProgrammeInput: {candidatesOfGroup: $candidatesOfProgramme, chestNo: $chestNO, programme_code: $programCode}\n  ) {\n    id\n    candidate {\n      name\n      chestNO\n    }\n    programme {\n      name\n      programCode\n    }\n    candidatesOfGroup {\n      name\n      chestNO\n    }\n  }\n}\n\nmutation EditCandidateProgramme($candidatesOfProgramme: [String!], $chestNO: String!, $programCode: String!, $id: Int!) {\n  updateCandidateProgramme(\n    updateCandidateProgrammeInput: {candidatesOfGroup: $candidatesOfProgramme, chestNo: $chestNO, id: $id, programme_code: $programCode}\n  ) {\n    id\n    candidate {\n      name\n      chestNO\n    }\n    programme {\n      name\n      programCode\n    }\n    candidatesOfGroup {\n      name\n      chestNO\n    }\n  }\n}\n\nmutation AddManyCandidateProgrammes($inputs: [CreateCandidateProgrammeInput!]!) {\n  createManyCandidateProgramme(\n    createManyCandidateProgrammeInput: {inputs: $inputs}\n  ) {\n    errors\n    result {\n      candidate {\n        name\n        chestNO\n      }\n      programme {\n        name\n        programCode\n      }\n    }\n  }\n}\n\nmutation DeleteCandidateProgramme($id: Int!) {\n  removeCandidateProgramme(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllCandidateProgrammes($api_key: String!) {\n  candidateProgrammes(api_key: $api_key) {\n    id\n    candidate {\n      name\n      chestNO\n    }\n    programme {\n      name\n      programCode\n    }\n  }\n}\n\nmutation AddCandidateProgramme($candidatesOfProgramme: [String!], $chestNO: String!, $programCode: String!) {\n  createCandidateProgramme(\n    createCandidateProgrammeInput: {candidatesOfGroup: $candidatesOfProgramme, chestNo: $chestNO, programme_code: $programCode}\n  ) {\n    id\n    candidate {\n      name\n      chestNO\n    }\n    programme {\n      name\n      programCode\n    }\n    candidatesOfGroup {\n      name\n      chestNO\n    }\n  }\n}\n\nmutation EditCandidateProgramme($candidatesOfProgramme: [String!], $chestNO: String!, $programCode: String!, $id: Int!) {\n  updateCandidateProgramme(\n    updateCandidateProgrammeInput: {candidatesOfGroup: $candidatesOfProgramme, chestNo: $chestNO, id: $id, programme_code: $programCode}\n  ) {\n    id\n    candidate {\n      name\n      chestNO\n    }\n    programme {\n      name\n      programCode\n    }\n    candidatesOfGroup {\n      name\n      chestNO\n    }\n  }\n}\n\nmutation AddManyCandidateProgrammes($inputs: [CreateCandidateProgrammeInput!]!) {\n  createManyCandidateProgramme(\n    createManyCandidateProgrammeInput: {inputs: $inputs}\n  ) {\n    errors\n    result {\n      candidate {\n        name\n        chestNO\n      }\n      programme {\n        name\n        programCode\n      }\n    }\n  }\n}\n\nmutation DeleteCandidateProgramme($id: Int!) {\n  removeCandidateProgramme(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllCandidates($api_key: String!) {\n  candidates(api_key: $api_key) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n    candidateProgrammes {\n      programme {\n        name\n        programCode\n        type\n      }\n    }\n  }\n}\n\nquery GetAllDetailedCandidates($api_key: String!) {\n  candidates(api_key: $api_key) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n    id\n    candidateProgrammes {\n      mark\n      point\n      id\n      programme {\n        name\n        programCode\n        type\n        mode\n      }\n      candidatesOfGroup {\n        id\n      }\n    }\n    groupPoint\n    individualPoint\n  }\n}\n\nquery GetOneCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    name\n    chestNO\n    individualPoint\n    groupPoint\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nquery GetCandidateByChestNo($api_key: String!, $chestNO: String!) {\n  candidateByChestNo(api_key: $api_key, chestNo: $chestNO) {\n    id\n    chestNO\n    name\n    category {\n      id\n      name\n    }\n    team {\n      id\n      name\n    }\n    individualPoint\n    candidateProgrammes {\n      id\n      programme {\n        id\n        resultPublished\n        type\n        programCode\n        date\n        name\n      }\n      finalgrade {\n        id\n        name\n      }\n      finalposition {\n        id\n        name\n      }\n      zonalgrade {\n        id\n        name\n      }\n      zonalposition {\n        id\n        name\n      }\n      candidatesOfGroup {\n        id\n        name\n        chestNO\n      }\n      point\n    }\n  }\n}\n\nquery GetDetailedCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    chestNO\n    candidateProgrammes {\n      id\n      programme {\n        id\n        type\n        programCode\n        name\n      }\n      finalgrade {\n        id\n        name\n      }\n      finalposition {\n        id\n        name\n      }\n      zonalgrade {\n        id\n        name\n      }\n      zonalposition {\n        id\n        name\n      }\n      candidatesOfGroup {\n        id\n        name\n        chestNO\n      }\n      point\n    }\n  }\n}\n\nmutation AddCandidate($category: String!, $chestNO: String!, $name: String!, $team: String!) {\n  createCandidate(\n    createCandidateInput: {name: $name, category: $category, chestNO: $chestNO, team: $team}\n  ) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nmutation AddManyCandidates($inputs: [CreateCandidateInput!]!) {\n  createManyCandidates(createCandidateInput: {inputs: $inputs}) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nmutation EditCandidate($id: Int!, $name: String!, $category: String, $chestNO: String, $team: String) {\n  updateCandidate(\n    updateCandidateInput: {id: $id, name: $name, category: $category, chestNO: $chestNO, team: $team}\n  ) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nmutation DeleteCandidate($id: Int!) {\n  removeCandidate(id: $id) {\n    __typename\n  }\n}\n\nquery CategorBasedToppers {\n  getCategoryBasedToppers {\n    id\n    name\n    candidates {\n      chestNO\n      name\n      category {\n        name\n      }\n      team {\n        name\n      }\n    }\n  }\n}"): (typeof documents)["query GetAllCandidates($api_key: String!) {\n  candidates(api_key: $api_key) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n    candidateProgrammes {\n      programme {\n        name\n        programCode\n        type\n      }\n    }\n  }\n}\n\nquery GetAllDetailedCandidates($api_key: String!) {\n  candidates(api_key: $api_key) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n    id\n    candidateProgrammes {\n      mark\n      point\n      id\n      programme {\n        name\n        programCode\n        type\n        mode\n      }\n      candidatesOfGroup {\n        id\n      }\n    }\n    groupPoint\n    individualPoint\n  }\n}\n\nquery GetOneCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    name\n    chestNO\n    individualPoint\n    groupPoint\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nquery GetCandidateByChestNo($api_key: String!, $chestNO: String!) {\n  candidateByChestNo(api_key: $api_key, chestNo: $chestNO) {\n    id\n    chestNO\n    name\n    category {\n      id\n      name\n    }\n    team {\n      id\n      name\n    }\n    individualPoint\n    candidateProgrammes {\n      id\n      programme {\n        id\n        resultPublished\n        type\n        programCode\n        date\n        name\n      }\n      finalgrade {\n        id\n        name\n      }\n      finalposition {\n        id\n        name\n      }\n      zonalgrade {\n        id\n        name\n      }\n      zonalposition {\n        id\n        name\n      }\n      candidatesOfGroup {\n        id\n        name\n        chestNO\n      }\n      point\n    }\n  }\n}\n\nquery GetDetailedCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    chestNO\n    candidateProgrammes {\n      id\n      programme {\n        id\n        type\n        programCode\n        name\n      }\n      finalgrade {\n        id\n        name\n      }\n      finalposition {\n        id\n        name\n      }\n      zonalgrade {\n        id\n        name\n      }\n      zonalposition {\n        id\n        name\n      }\n      candidatesOfGroup {\n        id\n        name\n        chestNO\n      }\n      point\n    }\n  }\n}\n\nmutation AddCandidate($category: String!, $chestNO: String!, $name: String!, $team: String!) {\n  createCandidate(\n    createCandidateInput: {name: $name, category: $category, chestNO: $chestNO, team: $team}\n  ) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nmutation AddManyCandidates($inputs: [CreateCandidateInput!]!) {\n  createManyCandidates(createCandidateInput: {inputs: $inputs}) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nmutation EditCandidate($id: Int!, $name: String!, $category: String, $chestNO: String, $team: String) {\n  updateCandidate(\n    updateCandidateInput: {id: $id, name: $name, category: $category, chestNO: $chestNO, team: $team}\n  ) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nmutation DeleteCandidate($id: Int!) {\n  removeCandidate(id: $id) {\n    __typename\n  }\n}\n\nquery CategorBasedToppers {\n  getCategoryBasedToppers {\n    id\n    name\n    candidates {\n      chestNO\n      name\n      category {\n        name\n      }\n      team {\n        name\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllCategories($api_key: String!) {\n  categories(api_key: $api_key) {\n    id\n    name\n  }\n}\n\nquery GetOneCategory($id: Int!, $api_key: String!) {\n  category(id: $id, api_key: $api_key) {\n    id\n    name\n  }\n}\n\nmutation AddCategory($name: String!) {\n  createCategory(createCategoryInput: {name: $name}) {\n    id\n    name\n  }\n}\n\nmutation EditCategory($id: Int!, $name: String!) {\n  updateCategory(updateCategoryInput: {id: $id, name: $name}) {\n    id\n    name\n  }\n}\n\nmutation DeleteCategory($id: Int!) {\n  removeCategory(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllCategories($api_key: String!) {\n  categories(api_key: $api_key) {\n    id\n    name\n  }\n}\n\nquery GetOneCategory($id: Int!, $api_key: String!) {\n  category(id: $id, api_key: $api_key) {\n    id\n    name\n  }\n}\n\nmutation AddCategory($name: String!) {\n  createCategory(createCategoryInput: {name: $name}) {\n    id\n    name\n  }\n}\n\nmutation EditCategory($id: Int!, $name: String!) {\n  updateCategory(updateCategoryInput: {id: $id, name: $name}) {\n    id\n    name\n  }\n}\n\nmutation DeleteCategory($id: Int!) {\n  removeCategory(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllCredentials {\n  credentials {\n    id\n    username\n    roles\n  }\n}\n\nquery GetOneCredential($id: Int!) {\n  credential(id: $id) {\n    id\n    username\n    roles\n    categories {\n      name\n      id\n    }\n    team {\n      name\n      id\n    }\n  }\n}\n\nmutation AddCredential($name: String!, $categories: [String!], $team: String, $password: String!, $roles: Roles!) {\n  createCredential(\n    createCredentialInput: {username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation EditCredential($id: Int!, $name: String, $categories: [String!], $team: String, $password: String, $roles: Roles) {\n  updateCredential(\n    updateCredentialInput: {id: $id, username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation DeleteCredential($id: Int!) {\n  removeCredential(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllCredentials {\n  credentials {\n    id\n    username\n    roles\n  }\n}\n\nquery GetOneCredential($id: Int!) {\n  credential(id: $id) {\n    id\n    username\n    roles\n    categories {\n      name\n      id\n    }\n    team {\n      name\n      id\n    }\n  }\n}\n\nmutation AddCredential($name: String!, $categories: [String!], $team: String, $password: String!, $roles: Roles!) {\n  createCredential(\n    createCredentialInput: {username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation EditCredential($id: Int!, $name: String, $categories: [String!], $team: String, $password: String, $roles: Roles) {\n  updateCredential(\n    updateCredentialInput: {id: $id, username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation DeleteCredential($id: Int!) {\n  removeCredential(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getSettings($api_key: String!) {\n  details(api_key: $api_key) {\n    name\n    logoId\n    id\n    isMultipleResultAllowed\n    motto\n    institution\n    coverId\n    isMediaHave\n    isSkillHave\n    isResultReady\n  }\n}\n\nmutation EditSettings($id: Int!, $name: String!, $logoId: String!, $motto: String!, $institution: String!, $coverId: String!, $isMediaHave: Boolean!, $isSkillHave: Boolean!) {\n  updateDetail(\n    updateDetailInput: {id: $id, name: $name, logoId: $logoId, motto: $motto, institution: $institution, coverId: $coverId, isMediaHave: $isMediaHave, isSkillHave: $isSkillHave}\n  ) {\n    id\n    name\n    logoId\n    motto\n    institution\n    coverId\n    isMediaHave\n    isSkillHave\n    isResultReady\n    isMultipleResultAllowed\n  }\n}"): (typeof documents)["query getSettings($api_key: String!) {\n  details(api_key: $api_key) {\n    name\n    logoId\n    id\n    isMultipleResultAllowed\n    motto\n    institution\n    coverId\n    isMediaHave\n    isSkillHave\n    isResultReady\n  }\n}\n\nmutation EditSettings($id: Int!, $name: String!, $logoId: String!, $motto: String!, $institution: String!, $coverId: String!, $isMediaHave: Boolean!, $isSkillHave: Boolean!) {\n  updateDetail(\n    updateDetailInput: {id: $id, name: $name, logoId: $logoId, motto: $motto, institution: $institution, coverId: $coverId, isMediaHave: $isMediaHave, isSkillHave: $isSkillHave}\n  ) {\n    id\n    name\n    logoId\n    motto\n    institution\n    coverId\n    isMediaHave\n    isSkillHave\n    isResultReady\n    isMultipleResultAllowed\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllGrades($api_key: String!) {\n  grades(api_key: $api_key) {\n    id\n    name\n    percentage\n  }\n}\n\nquery GetOneGrade($id: Int!, $api_key: String!) {\n  grade(id: $id, api_key: $api_key) {\n    id\n    name\n    percentage\n    pointGroup\n    pointHouse\n    pointSingle\n  }\n}\n\nmutation AddGrade($name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  createGrade(\n    createGradeInput: {name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    percentage\n  }\n}\n\nmutation EditGrade($id: Int!, $name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  updateGrade(\n    updateGradeInput: {id: $id, name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    percentage\n  }\n}\n\nmutation DeleteGrade($id: Int!) {\n  removeGrade(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllGrades($api_key: String!) {\n  grades(api_key: $api_key) {\n    id\n    name\n    percentage\n  }\n}\n\nquery GetOneGrade($id: Int!, $api_key: String!) {\n  grade(id: $id, api_key: $api_key) {\n    id\n    name\n    percentage\n    pointGroup\n    pointHouse\n    pointSingle\n  }\n}\n\nmutation AddGrade($name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  createGrade(\n    createGradeInput: {name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    percentage\n  }\n}\n\nmutation EditGrade($id: Int!, $name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  updateGrade(\n    updateGradeInput: {id: $id, name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    percentage\n  }\n}\n\nmutation DeleteGrade($id: Int!) {\n  removeGrade(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation LoginUser($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    admin {\n      username\n      id\n      roles\n      categories {\n        id\n        name\n      }\n      team {\n        id\n        name\n      }\n    }\n    token\n  }\n}\n\nquery CheckLoggedIn {\n  checkLoggedIn {\n    username\n    id\n    roles\n    categories {\n      id\n      name\n    }\n    team {\n      id\n      name\n    }\n  }\n}\n\nmutation LogOutUser {\n  logout\n}"): (typeof documents)["mutation LoginUser($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    admin {\n      username\n      id\n      roles\n      categories {\n        id\n        name\n      }\n      team {\n        id\n        name\n      }\n    }\n    token\n  }\n}\n\nquery CheckLoggedIn {\n  checkLoggedIn {\n    username\n    id\n    roles\n    categories {\n      id\n      name\n    }\n    team {\n      id\n      name\n    }\n  }\n}\n\nmutation LogOutUser {\n  logout\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllPositions($api_key: String!) {\n  positions(api_key: $api_key) {\n    id\n    name\n    value\n  }\n}\n\nquery GetOnePosition($id: Int!, $api_key: String!) {\n  position(id: $id, api_key: $api_key) {\n    id\n    name\n    value\n    pointGroup\n    pointSingle\n    pointHouse\n  }\n}\n\nmutation AddPosition($name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  createPosition(\n    createPositionInput: {name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    value\n  }\n}\n\nmutation EditPosition($id: Int!, $name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  updatePosition(\n    updatePositionInput: {id: $id, name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    value\n  }\n}\n\nmutation DeletePosition($id: Int!) {\n  removePosition(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllPositions($api_key: String!) {\n  positions(api_key: $api_key) {\n    id\n    name\n    value\n  }\n}\n\nquery GetOnePosition($id: Int!, $api_key: String!) {\n  position(id: $id, api_key: $api_key) {\n    id\n    name\n    value\n    pointGroup\n    pointSingle\n    pointHouse\n  }\n}\n\nmutation AddPosition($name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  createPosition(\n    createPositionInput: {name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    value\n  }\n}\n\nmutation EditPosition($id: Int!, $name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  updatePosition(\n    updatePositionInput: {id: $id, name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    value\n  }\n}\n\nmutation DeletePosition($id: Int!) {\n  removePosition(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllProgrammes($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    name\n    programCode\n    type\n    candidateCount\n    groupCount\n    category {\n      name\n    }\n    candidateProgramme {\n      candidate {\n        chestNO\n        name\n        team {\n          name\n        }\n      }\n    }\n  }\n}\n\nquery GetProgrammeByCode($api_key: String!, $programCode: String!) {\n  programmeByCode(api_key: $api_key, code: $programCode) {\n    candidateProgramme {\n      candidate {\n        name\n        chestNO\n        team {\n          name\n        }\n      }\n      finalgrade {\n        id\n        name\n      }\n      finalposition {\n        id\n        name\n      }\n      zonalgrade {\n        id\n        name\n      }\n      zonalposition {\n        id\n        name\n      }\n      candidatesOfGroup {\n        name\n        chestNO\n      }\n      point\n    }\n    resultEntered\n    resultPublished\n    programCode\n    name\n    type\n    groupCount\n    resultEntered\n    candidateCount\n    resultPublished\n    anyIssue\n    mode\n    type\n    category {\n      name\n    }\n    duration\n    date\n    venue\n  }\n}\n\nquery GetDetailedProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    candidateProgramme {\n      id\n      candidate {\n        name\n        chestNO\n        team {\n          name\n          id\n        }\n      }\n      candidatesOfGroup {\n        name\n        chestNO\n      }\n    }\n    resultEntered\n    resultPublished\n    programCode\n    candidateCount\n    name\n    type\n    groupCount\n    resultEntered\n    resultPublished\n    anyIssue\n    category {\n      name\n    }\n    duration\n    date\n    venue\n  }\n}\n\nquery totalProgramsCount($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n  }\n}\n\nquery GetPublishedProgrammes($api_key: String!) {\n  resultPublishedProgrammes(api_key: $api_key) {\n    id\n    name\n    mode\n    type\n    programCode\n    resultEntered\n    resultPublished\n    candidateCount\n    category {\n      name\n    }\n    anyIssue\n    candidateProgramme {\n      id\n      point\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      candidate {\n        name\n        chestNO\n        team {\n          name\n          id\n        }\n      }\n    }\n  }\n}\n\nquery GetEnteredProgrammes($api_key: String!) {\n  resultEnteredProgrammes(api_key: $api_key) {\n    id\n    name\n    mode\n    type\n    programCode\n    resultEntered\n    resultPublished\n    candidateCount\n    category {\n      name\n    }\n    anyIssue\n    candidateProgramme {\n      id\n      point\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      candidate {\n        name\n        chestNO\n        team {\n          name\n          id\n        }\n      }\n    }\n  }\n}\n\nquery GetAllDetailedProgrammeForJudge($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    candidateProgramme {\n      candidate {\n        name\n        chestNO\n        team {\n          name\n        }\n      }\n      candidatesOfGroup {\n        name\n        chestNO\n      }\n      mark\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n    }\n    resultEntered\n    resultPublished\n    programCode\n    name\n    groupCount\n    candidateCount\n    resultEntered\n    resultPublished\n    anyIssue\n    type\n    category {\n      name\n    }\n  }\n}\n\nquery GetAllDetailedProgramme($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    candidateProgramme {\n      candidate {\n        id\n      }\n      candidatesOfGroup {\n        id\n      }\n    }\n    resultEntered\n    resultPublished\n    programCode\n    name\n    type\n    groupCount\n    candidateCount\n    resultEntered\n    resultPublished\n    anyIssue\n    category {\n      name\n    }\n    duration\n    date\n    venue\n  }\n}\n\nquery GetAllProgrammesByCandidates($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    name\n    programCode\n    resultEntered\n    resultPublished\n    candidateCount\n    groupCount\n    category {\n      name\n    }\n    candidateProgramme {\n      id\n    }\n  }\n}\n\nquery GetOneProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n    duration\n    anyIssue\n    candidateCount\n    groupCount\n    venue\n    date\n    category {\n      name\n    }\n    type\n    mode\n    conceptNote\n  }\n}\n\nmutation AddProgramme($name: String!, $candidateCount: Int!, $category: String!, $duration: Int!, $groupCount: Int, $programCode: String!, $type: Type!, $mode: Mode!, $conceptNote: String!) {\n  createProgramme(\n    createProgrammeInput: {name: $name, candidateCount: $candidateCount, category: $category, duration: $duration, groupCount: $groupCount, programCode: $programCode, type: $type, mode: $mode, conceptNote: $conceptNote}\n  ) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n  }\n}\n\nmutation AddManyProgrammes($inputs: [CreateProgrammeInput!]!) {\n  createManyProgrammes(createProgrammeInput: {inputs: $inputs}) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n  }\n}\n\nquery programsCount($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n  }\n}\n\nmutation EditProgramme($id: Int!, $name: String!, $candidateCount: Int!, $category: String!, $duration: Int!, $groupCount: Int, $programCode: String!, $type: Type!, $mode: Mode!, $conceptNote: String!) {\n  updateProgramme(\n    updateProgrammeInput: {id: $id, name: $name, candidateCount: $candidateCount, category: $category, duration: $duration, groupCount: $groupCount, programCode: $programCode, type: $type, mode: $mode, conceptNote: $conceptNote}\n  ) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n  }\n}\n\nmutation DeleteProgramme($id: Int!) {\n  removeProgramme(id: $id) {\n    __typename\n  }\n}\n\nmutation UploadManySchedule($inputs: [CreateSchedule!]!) {\n  setManySchedule(createScheduleInput: {inputs: $inputs}) {\n    programCode\n    date\n    venue\n  }\n}\n\nmutation UploadSchedule($programCode: String!, $date: DateTime!, $venue: Int) {\n  setSchedule(\n    createScheduleInput: {code: $programCode, date: $date, venue: $venue}\n  ) {\n    programCode\n    date\n    venue\n  }\n}"): (typeof documents)["query GetAllProgrammes($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    name\n    programCode\n    type\n    candidateCount\n    groupCount\n    category {\n      name\n    }\n    candidateProgramme {\n      candidate {\n        chestNO\n        name\n        team {\n          name\n        }\n      }\n    }\n  }\n}\n\nquery GetProgrammeByCode($api_key: String!, $programCode: String!) {\n  programmeByCode(api_key: $api_key, code: $programCode) {\n    candidateProgramme {\n      candidate {\n        name\n        chestNO\n        team {\n          name\n        }\n      }\n      finalgrade {\n        id\n        name\n      }\n      finalposition {\n        id\n        name\n      }\n      zonalgrade {\n        id\n        name\n      }\n      zonalposition {\n        id\n        name\n      }\n      candidatesOfGroup {\n        name\n        chestNO\n      }\n      point\n    }\n    resultEntered\n    resultPublished\n    programCode\n    name\n    type\n    groupCount\n    resultEntered\n    candidateCount\n    resultPublished\n    anyIssue\n    mode\n    type\n    category {\n      name\n    }\n    duration\n    date\n    venue\n  }\n}\n\nquery GetDetailedProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    candidateProgramme {\n      id\n      candidate {\n        name\n        chestNO\n        team {\n          name\n          id\n        }\n      }\n      candidatesOfGroup {\n        name\n        chestNO\n      }\n    }\n    resultEntered\n    resultPublished\n    programCode\n    candidateCount\n    name\n    type\n    groupCount\n    resultEntered\n    resultPublished\n    anyIssue\n    category {\n      name\n    }\n    duration\n    date\n    venue\n  }\n}\n\nquery totalProgramsCount($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n  }\n}\n\nquery GetPublishedProgrammes($api_key: String!) {\n  resultPublishedProgrammes(api_key: $api_key) {\n    id\n    name\n    mode\n    type\n    programCode\n    resultEntered\n    resultPublished\n    candidateCount\n    category {\n      name\n    }\n    anyIssue\n    candidateProgramme {\n      id\n      point\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      candidate {\n        name\n        chestNO\n        team {\n          name\n          id\n        }\n      }\n    }\n  }\n}\n\nquery GetEnteredProgrammes($api_key: String!) {\n  resultEnteredProgrammes(api_key: $api_key) {\n    id\n    name\n    mode\n    type\n    programCode\n    resultEntered\n    resultPublished\n    candidateCount\n    category {\n      name\n    }\n    anyIssue\n    candidateProgramme {\n      id\n      point\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      candidate {\n        name\n        chestNO\n        team {\n          name\n          id\n        }\n      }\n    }\n  }\n}\n\nquery GetAllDetailedProgrammeForJudge($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    candidateProgramme {\n      candidate {\n        name\n        chestNO\n        team {\n          name\n        }\n      }\n      candidatesOfGroup {\n        name\n        chestNO\n      }\n      mark\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n    }\n    resultEntered\n    resultPublished\n    programCode\n    name\n    groupCount\n    candidateCount\n    resultEntered\n    resultPublished\n    anyIssue\n    type\n    category {\n      name\n    }\n  }\n}\n\nquery GetAllDetailedProgramme($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    candidateProgramme {\n      candidate {\n        id\n      }\n      candidatesOfGroup {\n        id\n      }\n    }\n    resultEntered\n    resultPublished\n    programCode\n    name\n    type\n    groupCount\n    candidateCount\n    resultEntered\n    resultPublished\n    anyIssue\n    category {\n      name\n    }\n    duration\n    date\n    venue\n  }\n}\n\nquery GetAllProgrammesByCandidates($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    name\n    programCode\n    resultEntered\n    resultPublished\n    candidateCount\n    groupCount\n    category {\n      name\n    }\n    candidateProgramme {\n      id\n    }\n  }\n}\n\nquery GetOneProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n    duration\n    anyIssue\n    candidateCount\n    groupCount\n    venue\n    date\n    category {\n      name\n    }\n    type\n    mode\n    conceptNote\n  }\n}\n\nmutation AddProgramme($name: String!, $candidateCount: Int!, $category: String!, $duration: Int!, $groupCount: Int, $programCode: String!, $type: Type!, $mode: Mode!, $conceptNote: String!) {\n  createProgramme(\n    createProgrammeInput: {name: $name, candidateCount: $candidateCount, category: $category, duration: $duration, groupCount: $groupCount, programCode: $programCode, type: $type, mode: $mode, conceptNote: $conceptNote}\n  ) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n  }\n}\n\nmutation AddManyProgrammes($inputs: [CreateProgrammeInput!]!) {\n  createManyProgrammes(createProgrammeInput: {inputs: $inputs}) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n  }\n}\n\nquery programsCount($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n  }\n}\n\nmutation EditProgramme($id: Int!, $name: String!, $candidateCount: Int!, $category: String!, $duration: Int!, $groupCount: Int, $programCode: String!, $type: Type!, $mode: Mode!, $conceptNote: String!) {\n  updateProgramme(\n    updateProgrammeInput: {id: $id, name: $name, candidateCount: $candidateCount, category: $category, duration: $duration, groupCount: $groupCount, programCode: $programCode, type: $type, mode: $mode, conceptNote: $conceptNote}\n  ) {\n    id\n    name\n    resultEntered\n    resultPublished\n    programCode\n  }\n}\n\nmutation DeleteProgramme($id: Int!) {\n  removeProgramme(id: $id) {\n    __typename\n  }\n}\n\nmutation UploadManySchedule($inputs: [CreateSchedule!]!) {\n  setManySchedule(createScheduleInput: {inputs: $inputs}) {\n    programCode\n    date\n    venue\n  }\n}\n\nmutation UploadSchedule($programCode: String!, $date: DateTime!, $venue: Int) {\n  setSchedule(\n    createScheduleInput: {code: $programCode, date: $date, venue: $venue}\n  ) {\n    programCode\n    date\n    venue\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation PublishResults($programCodes: [String!]!) {\n  publishResults(programmeCode: $programCodes) {\n    id\n    resultPublished\n    programCode\n  }\n}\n\nmutation PublishResult($programCodes: String!) {\n  publishResult(programmeCode: $programCodes)\n}"): (typeof documents)["mutation PublishResults($programCodes: [String!]!) {\n  publishResults(programmeCode: $programCodes) {\n    id\n    resultPublished\n    programCode\n  }\n}\n\nmutation PublishResult($programCodes: String!) {\n  publishResult(programmeCode: $programCodes)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetRules($id: Int!, $api_key: String!) {\n  category(id: $id, api_key: $api_key) {\n    id\n    name\n    settings {\n      id\n      minProgram\n      maxProgram\n      minGroup\n      maxGroup\n      minStage\n      maxStage\n      minNonStage\n      maxNonStage\n      minOutDoor\n      maxOutDoor\n      minSports\n      maxSports\n      minSportsSingle\n      maxSportsSingle\n      minSportsGroup\n      maxSportsGroup\n      isProgrammeListUpdatable\n      minSingle\n      maxSingle\n    }\n  }\n}\n\nmutation AddRules($category: String!, $minProgram: Int!, $maxProgram: Int!, $minGroup: Int!, $maxGroup: Int!, $minStage: Int!, $maxStage: Int!, $minNonStage: Int!, $maxNonStage: Int!, $minOutDoor: Int!, $maxOutDoor: Int!, $minSports: Int!, $maxSports: Int!, $minSportsSingle: Int!, $maxSportsSingle: Int!, $minSportsGroup: Int!, $maxSportsGroup: Int!, $minSingle: Int!, $maxSingle: Int!) {\n  createCategorySetting(\n    createCategorySettingInput: {category: $category, minProgram: $minProgram, maxProgram: $maxProgram, minGroup: $minGroup, maxGroup: $maxGroup, minStage: $minStage, maxStage: $maxStage, minNonStage: $minNonStage, maxNonStage: $maxNonStage, minOutDoor: $minOutDoor, maxOutDoor: $maxOutDoor, minSports: $minSports, maxSports: $maxSports, minSportsSingle: $minSportsSingle, maxSportsSingle: $maxSportsSingle, minSportsGroup: $minSportsGroup, maxSportsGroup: $maxSportsGroup, minSingle: $minSingle, maxSingle: $maxSingle}\n  ) {\n    id\n    minProgram\n    maxProgram\n    minGroup\n    maxGroup\n    minStage\n    maxStage\n    minNonStage\n    maxNonStage\n    minOutDoor\n    maxOutDoor\n    minSports\n    maxSports\n    minSportsSingle\n    maxSportsSingle\n    minSportsGroup\n    maxSportsGroup\n    minSingle\n    maxSingle\n  }\n}\n\nmutation EditRules($id: Int!, $category: String!, $minProgram: Int!, $maxProgram: Int!, $minGroup: Int!, $maxGroup: Int!, $minStage: Int!, $maxStage: Int!, $minNonStage: Int!, $maxNonStage: Int!, $minOutDoor: Int!, $maxOutDoor: Int!, $minSports: Int!, $maxSports: Int!, $minSportsSingle: Int!, $maxSportsSingle: Int!, $minSportsGroup: Int!, $maxSportsGroup: Int!, $minSingle: Int!, $maxSingle: Int!) {\n  updateCategorySetting(\n    updateCategorySettingInput: {id: $id, category: $category, minProgram: $minProgram, maxProgram: $maxProgram, minGroup: $minGroup, maxGroup: $maxGroup, minStage: $minStage, maxStage: $maxStage, minNonStage: $minNonStage, maxNonStage: $maxNonStage, minOutDoor: $minOutDoor, maxOutDoor: $maxOutDoor, minSports: $minSports, maxSports: $maxSports, minSportsSingle: $minSportsSingle, maxSportsSingle: $maxSportsSingle, minSportsGroup: $minSportsGroup, maxSportsGroup: $maxSportsGroup, minSingle: $minSingle, maxSingle: $maxSingle}\n  ) {\n    id\n    minProgram\n    maxProgram\n    minGroup\n    maxGroup\n    minStage\n    maxStage\n    minNonStage\n    maxNonStage\n    minOutDoor\n    maxOutDoor\n    minSports\n    maxSports\n    minSportsSingle\n    maxSportsSingle\n    minSportsGroup\n    maxSportsGroup\n    minSingle\n    maxSingle\n  }\n}\n\nmutation DeleteRules($id: Int!) {\n  removeCategorySetting(id: $id) {\n    __typename\n  }\n}\n\nmutation ChangeRulesStatus($name: String!) {\n  changeProgrammeListUpdatable(name: $name) {\n    id\n    isProgrammeListUpdatable\n  }\n}"): (typeof documents)["query GetRules($id: Int!, $api_key: String!) {\n  category(id: $id, api_key: $api_key) {\n    id\n    name\n    settings {\n      id\n      minProgram\n      maxProgram\n      minGroup\n      maxGroup\n      minStage\n      maxStage\n      minNonStage\n      maxNonStage\n      minOutDoor\n      maxOutDoor\n      minSports\n      maxSports\n      minSportsSingle\n      maxSportsSingle\n      minSportsGroup\n      maxSportsGroup\n      isProgrammeListUpdatable\n      minSingle\n      maxSingle\n    }\n  }\n}\n\nmutation AddRules($category: String!, $minProgram: Int!, $maxProgram: Int!, $minGroup: Int!, $maxGroup: Int!, $minStage: Int!, $maxStage: Int!, $minNonStage: Int!, $maxNonStage: Int!, $minOutDoor: Int!, $maxOutDoor: Int!, $minSports: Int!, $maxSports: Int!, $minSportsSingle: Int!, $maxSportsSingle: Int!, $minSportsGroup: Int!, $maxSportsGroup: Int!, $minSingle: Int!, $maxSingle: Int!) {\n  createCategorySetting(\n    createCategorySettingInput: {category: $category, minProgram: $minProgram, maxProgram: $maxProgram, minGroup: $minGroup, maxGroup: $maxGroup, minStage: $minStage, maxStage: $maxStage, minNonStage: $minNonStage, maxNonStage: $maxNonStage, minOutDoor: $minOutDoor, maxOutDoor: $maxOutDoor, minSports: $minSports, maxSports: $maxSports, minSportsSingle: $minSportsSingle, maxSportsSingle: $maxSportsSingle, minSportsGroup: $minSportsGroup, maxSportsGroup: $maxSportsGroup, minSingle: $minSingle, maxSingle: $maxSingle}\n  ) {\n    id\n    minProgram\n    maxProgram\n    minGroup\n    maxGroup\n    minStage\n    maxStage\n    minNonStage\n    maxNonStage\n    minOutDoor\n    maxOutDoor\n    minSports\n    maxSports\n    minSportsSingle\n    maxSportsSingle\n    minSportsGroup\n    maxSportsGroup\n    minSingle\n    maxSingle\n  }\n}\n\nmutation EditRules($id: Int!, $category: String!, $minProgram: Int!, $maxProgram: Int!, $minGroup: Int!, $maxGroup: Int!, $minStage: Int!, $maxStage: Int!, $minNonStage: Int!, $maxNonStage: Int!, $minOutDoor: Int!, $maxOutDoor: Int!, $minSports: Int!, $maxSports: Int!, $minSportsSingle: Int!, $maxSportsSingle: Int!, $minSportsGroup: Int!, $maxSportsGroup: Int!, $minSingle: Int!, $maxSingle: Int!) {\n  updateCategorySetting(\n    updateCategorySettingInput: {id: $id, category: $category, minProgram: $minProgram, maxProgram: $maxProgram, minGroup: $minGroup, maxGroup: $maxGroup, minStage: $minStage, maxStage: $maxStage, minNonStage: $minNonStage, maxNonStage: $maxNonStage, minOutDoor: $minOutDoor, maxOutDoor: $maxOutDoor, minSports: $minSports, maxSports: $maxSports, minSportsSingle: $minSportsSingle, maxSportsSingle: $maxSportsSingle, minSportsGroup: $minSportsGroup, maxSportsGroup: $maxSportsGroup, minSingle: $minSingle, maxSingle: $maxSingle}\n  ) {\n    id\n    minProgram\n    maxProgram\n    minGroup\n    maxGroup\n    minStage\n    maxStage\n    minNonStage\n    maxNonStage\n    minOutDoor\n    maxOutDoor\n    minSports\n    maxSports\n    minSportsSingle\n    maxSportsSingle\n    minSportsGroup\n    maxSportsGroup\n    minSingle\n    maxSingle\n  }\n}\n\nmutation DeleteRules($id: Int!) {\n  removeCategorySetting(id: $id) {\n    __typename\n  }\n}\n\nmutation ChangeRulesStatus($name: String!) {\n  changeProgrammeListUpdatable(name: $name) {\n    id\n    isProgrammeListUpdatable\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllTeamCandidates($api_key: String!) {\n  candidates(api_key: $api_key) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nquery GetOneTeamCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    name\n    individualPoint\n    groupPoint\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nquery GetDetailedTeamCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    chestNO\n    candidateProgrammes {\n      id\n      programme {\n        id\n        type\n        programCode\n        name\n      }\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      candidatesOfGroup {\n        id\n        name\n        chestNO\n      }\n      point\n    }\n  }\n}"): (typeof documents)["query GetAllTeamCandidates($api_key: String!) {\n  candidates(api_key: $api_key) {\n    id\n    name\n    chestNO\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nquery GetOneTeamCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    name\n    individualPoint\n    groupPoint\n    category {\n      name\n    }\n    team {\n      name\n    }\n  }\n}\n\nquery GetDetailedTeamCandidate($id: Int!, $api_key: String!) {\n  candidate(id: $id, api_key: $api_key) {\n    id\n    chestNO\n    candidateProgrammes {\n      id\n      programme {\n        id\n        type\n        programCode\n        name\n      }\n      finalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      finalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalgrade {\n        name\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      zonalposition {\n        name\n        value\n        pointGroup\n        pointSingle\n        pointHouse\n      }\n      candidatesOfGroup {\n        id\n        name\n        chestNO\n      }\n      point\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllTeamProgrammes($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    name\n    programCode\n    category {\n      name\n    }\n  }\n}\n\nquery GetDetailedTeamProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    candidateProgramme {\n      candidate {\n        name\n        chestNO\n      }\n    }\n    resultPublished\n    programCode\n  }\n}\n\nquery GetOneTeamProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    id\n    name\n    resultPublished\n    programCode\n    duration\n    candidateCount\n    groupCount\n    category {\n      name\n    }\n    type\n    mode\n    conceptNote\n  }\n}"): (typeof documents)["query GetAllTeamProgrammes($api_key: String!) {\n  programmes(api_key: $api_key) {\n    id\n    name\n    programCode\n    category {\n      name\n    }\n  }\n}\n\nquery GetDetailedTeamProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    candidateProgramme {\n      candidate {\n        name\n        chestNO\n      }\n    }\n    resultPublished\n    programCode\n  }\n}\n\nquery GetOneTeamProgramme($id: Int!, $api_key: String!) {\n  programme(id: $id, api_key: $api_key) {\n    id\n    name\n    resultPublished\n    programCode\n    duration\n    candidateCount\n    groupCount\n    category {\n      name\n    }\n    type\n    mode\n    conceptNote\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllTeams($api_key: String!) {\n  teams(api_key: $api_key) {\n    id\n    name\n    totalPoint\n    color\n    zone {\n      name\n    }\n  }\n}\n\nquery GetAllTeamsByPoint($api_key: String!) {\n  teams(api_key: $api_key) {\n    id\n    name\n    totalPoint\n    color\n  }\n}\n\nquery GetOneTeam($id: Int!, $api_key: String!) {\n  team(id: $id, api_key: $api_key) {\n    id\n    name\n    description\n    shortName\n    totalPoint\n    color\n  }\n}\n\nmutation AddTeam($name: String!, $description: String!, $shortName: String!, $color: String!, $zoneId: Int!) {\n  createTeam(\n    createTeamInput: {name: $name, description: $description, shortName: $shortName, color: $color, zoneId: $zoneId}\n  ) {\n    id\n    name\n    description\n    shortName\n    color\n  }\n}\n\nmutation EditTeam($id: Int!, $name: String!, $description: String!, $shortName: String!, $color: String!, $zoneId: Int!) {\n  updateTeam(\n    updateTeamInput: {id: $id, name: $name, description: $description, shortName: $shortName, color: $color, zoneId: $zoneId}\n  ) {\n    id\n    name\n  }\n}\n\nmutation DeleteTeam($id: Int!) {\n  removeTeam(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllTeams($api_key: String!) {\n  teams(api_key: $api_key) {\n    id\n    name\n    totalPoint\n    color\n    zone {\n      name\n    }\n  }\n}\n\nquery GetAllTeamsByPoint($api_key: String!) {\n  teams(api_key: $api_key) {\n    id\n    name\n    totalPoint\n    color\n  }\n}\n\nquery GetOneTeam($id: Int!, $api_key: String!) {\n  team(id: $id, api_key: $api_key) {\n    id\n    name\n    description\n    shortName\n    totalPoint\n    color\n  }\n}\n\nmutation AddTeam($name: String!, $description: String!, $shortName: String!, $color: String!, $zoneId: Int!) {\n  createTeam(\n    createTeamInput: {name: $name, description: $description, shortName: $shortName, color: $color, zoneId: $zoneId}\n  ) {\n    id\n    name\n    description\n    shortName\n    color\n  }\n}\n\nmutation EditTeam($id: Int!, $name: String!, $description: String!, $shortName: String!, $color: String!, $zoneId: Int!) {\n  updateTeam(\n    updateTeamInput: {id: $id, name: $name, description: $description, shortName: $shortName, color: $color, zoneId: $zoneId}\n  ) {\n    id\n    name\n  }\n}\n\nmutation DeleteTeam($id: Int!) {\n  removeTeam(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllZones {\n  zones {\n    id\n    name\n  }\n}\n\nquery GetOneZone($id: Int!) {\n  zone(id: $id) {\n    id\n    name\n  }\n}\n\nmutation AddZone($name: String!) {\n  createZone(createZoneInput: {name: $name}) {\n    id\n    name\n  }\n}\n\nmutation EditZone($id: Int!, $name: String!) {\n  updateZone(updateZoneInput: {id: $id, name: $name}) {\n    id\n    name\n  }\n}\n\nmutation DeleteZone($id: Int!) {\n  removeZone(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllZones {\n  zones {\n    id\n    name\n  }\n}\n\nquery GetOneZone($id: Int!) {\n  zone(id: $id) {\n    id\n    name\n  }\n}\n\nmutation AddZone($name: String!) {\n  createZone(createZoneInput: {name: $name}) {\n    id\n    name\n  }\n}\n\nmutation EditZone($id: Int!, $name: String!) {\n  updateZone(updateZoneInput: {id: $id, name: $name}) {\n    id\n    name\n  }\n}\n\nmutation DeleteZone($id: Int!) {\n  removeZone(id: $id) {\n    __typename\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;